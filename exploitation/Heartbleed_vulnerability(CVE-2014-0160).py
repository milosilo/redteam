import subprocess
import argparse
import socket
import threading

# Heartbleed Vulnerability Checker CLI
# This tool checks for the Heartbleed vulnerability (CVE-2014-0160) in target hosts.
# It can also initiate a ping listener to catch confirmation pings if the vulnerability is detected.
# Created by milosilo

def heartbleed_scan(target_ip):
    # Use OpenSSL's tool to check for Heartbleed vulnerability
    command = ['openssl', 's_client', '-connect', f'{target_ip}:443', '-tlsextdebug']
    result = subprocess.run(command, capture_output=True, text=True)
    return result.stdout

def confirm_heartbleed(target_ip):
    # Send a confirmation ping if Heartbleed vulnerability is detected
    confirmation_command = ['ping', '-c', '5', target_ip]
    subprocess.run(confirmation_command)

def check_vulnerability(host):
    result = heartbleed_scan(host)
    if "heartbleed" in result.lower():
        print(f"Heartbleed vulnerability detected on {host}. Sending confirmation ping...")
        confirm_heartbleed(host)
    else:
        print(f"No Heartbleed vulnerability detected on {host}.")

def ping_listener(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((host, port))
        sock.listen(1)
        print(f"Ping listener started on {host}:{port}.")
        while True:
            connection, address = sock.accept()
            print(f"Confirmation ping received from {address[0]}:{address[1]}. System patched.")
            connection.close()
    except OSError as e:
        print(f"Error starting ping listener: {e}")

def main():
    parser = argparse.ArgumentParser(description="Heartbleed Vulnerability Checker CLI")
    parser.add_argument("hosts", nargs="+", help="List of target hosts to check for Heartbleed vulnerability")
    parser.add_argument("--listen", action="store_true", help="Start ping listener to catch confirmation pings")
    parser.add_argument("--port", type=int, default=12345, help="Port for ping listener (default: 12345)")

    args = parser.parse_args()

    if args.listen:
        listener_thread = threading.Thread(target=ping_listener, args=("0.0.0.0", args.port))
        listener_thread.start()

    for host in args.hosts:
        check_vulnerability(host)

    if args.listen:
        listener_thread.join()

if __name__ == "__main__":
    main()
